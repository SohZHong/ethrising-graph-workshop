type User @entity {
  id: Bytes!
  counterIncrementeds: [CounterIncremented]! @derivedFrom(field: "user")
  numberSets: [NumberSet]! @derivedFrom(field: "user")
}

type CounterIncremented @entity(immutable: true) {
  id: Bytes!
  user: User! # address
  previousNum: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  timestamp: Timestamp!
  transactionHash: Bytes!
}

type NumberSet @entity(timeseries: true) {
  id: Int8!
  user: User! # address
  num: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  timestamp: Timestamp!
  transactionHash: Bytes!
}

type ResetTriggered @entity(timeseries: true) {
  id: Int8!
  oldNumber: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  timestamp: Timestamp!
  transactionHash: Bytes!
}

type DailyCounterStats
  @aggregation(intervals: ["hour", "day"], source: "NumberSet") {
  id: Int8!
  user: User!
  timetamp: Timestamp!
  largestNumber: BigInt! @aggregate(fn: "max", arg: "num")
}

type DailyResetTriggered
  @aggregation(intervals: ["hour", "day"], source: "ResetTriggered") {
  id: Int8!
  user: User!
  timestamp: Timestamp!
  resetTriggered: Int8! @aggregate(fn: "id", cumulative: true)
}
